{
    "summary": "The code contains helper functions `string_to_list()` and `string_to_set()`, which convert a string-encoded list or set into Python integers. The `test_set_intersection` function compares the intersection of two sets with the sorted list from the input string, counting errors as a score, returning either total errors or 1000 for exceptions.",
    "details": [
        {
            "comment": "This code defines two helper functions: `string_to_list()` and `string_to_set()`. These functions are used to convert a list encoded in a string into a Python list or set object of integer elements. The `string_to_list()` function converts the input string into an integer list, while the `string_to_set()` function converts it into a set of integers. The assertion is raised if the input string does not contain a list.",
            "location": "\"/media/root/Toshiba XG3/works/graph-of-thoughts/docs/src/examples/set_intersection/utils.py\":0-35",
            "content": "# Copyright (c) 2023 ETH Zurich.\n#                    All rights reserved.\n#\n# Use of this source code is governed by a BSD-style license that can be\n# found in the LICENSE file.\n#\n# The source code is adapted from the sorting source code written by\n# Nils Blach.\n#\n# main author: Robert Gerstenberger\nfrom typing import Dict, List, Set\ndef string_to_list(string: str) -> List[int]:\n    \"\"\"\n    Helper function to convert a list encoded inside a string into a Python\n    list object of integer elements.\n    :param string: Input string containing a list.\n    :type string: str\n    :return: List of integer elements.\n    :rtype: List[int]\n    :raise AssertionError: If input string does not contain a list.\n    \"\"\"\n    assert string[0] == \"[\" and string[-1] == \"]\", \"String is not a list.\"\n    return [int(num) for num in string[1:-1].split(\",\")]\ndef string_to_set(string: str) -> Set[int]:\n    \"\"\"\n    Helper function to convert a list encoded inside a string into a Python\n    set object of integer elements.\n    :param string: Input string containing a list."
        },
        {
            "comment": "Function `string_to_list` converts a string input into an integer set. Function `test_set_intersection` checks if the final solution matches the ground truth by converting the result and current states to lists, sorting them, and comparing. Finally, `num_errors` function calculates the number of errors in the given state as a score.",
            "location": "\"/media/root/Toshiba XG3/works/graph-of-thoughts/docs/src/examples/set_intersection/utils.py\":36-71",
            "content": "    :type string: str\n    :return: Set of integer elements.\n    :rtype: Set[int]\n    :raise AssertionError: If input string does not contain a list.\n    \"\"\"\n    assert string[0] == \"[\" and string[-1] == \"]\", \"String is not a list.\"\n    return {int(num) for num in string[1:-1].split(\",\")}\ndef test_set_intersection(state: Dict) -> bool:\n    \"\"\"\n    Function to test whether the final solution matches ground truth.\n    :param state: Thought state that represents the final solution.\n    :type state: Dict\n    :return: Returns whether the solution matches the ground truth.\n    :rtype: bool\n    \"\"\"\n    # convert string to list\n    try:\n        correct_list = string_to_list(state[\"result\"])\n        sorted_list = sorted(string_to_list(state[\"current\"]))\n        return sorted_list == correct_list\n    except:\n        return False\ndef num_errors(state: Dict) -> float:\n    \"\"\"\n    Function to locally count the number of errors that serves as a score.\n    :param state: Thought state to be scored.\n    :type state: Dict\n    :return: Number of errors."
        },
        {
            "comment": "This function takes in two sets and a string, calculates the intersection of the sets and compares it with the sorted list from the string. If there is a mismatch between the common elements and the sorted list, it counts the number of errors. Returns the total number of errors found or 1000 if an exception occurs.",
            "location": "\"/media/root/Toshiba XG3/works/graph-of-thoughts/docs/src/examples/set_intersection/utils.py\":72-98",
            "content": "    :rtype: float\n    \"\"\"\n    try:\n        set1 = string_to_set(state[\"set1\"])\n        set2 = string_to_set(state[\"set2\"])\n        if \"subset\" in state and state[\"subset\"] != \"\" and state[\"subset\"] is not None:\n            set2 = string_to_set(state[\"subset\"])\n        common = sorted(list(set1 & set2))\n        llm_solution = sorted(string_to_list(state[\"current\"]))\n        num_errors = 0\n        common_idx = 0\n        llm_idx = 0\n        while common_idx < len(common) and llm_idx < len(llm_solution):\n            if common[common_idx] == llm_solution[llm_idx]:\n                common_idx += 1\n                llm_idx += 1\n            elif common[common_idx] < llm_solution[llm_idx]:\n                common_idx += 1\n                num_errors += 1\n            elif common[common_idx] > llm_solution[llm_idx]:\n                llm_idx += 1\n                num_errors += 1\n        num_errors += len(common) - common_idx + len(llm_solution) - llm_idx\n        return num_errors\n    except:\n        return 1000"
        }
    ]
}