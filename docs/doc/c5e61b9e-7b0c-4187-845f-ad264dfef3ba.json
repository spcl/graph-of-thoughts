{
    "summary": "This code defines an AbstractLanguageModel class with config file path, model name, and caching options for language models. It also includes two abstract methods: 'query' and 'get_response_texts', serving as placeholders for derived classes to implement their own functionality.",
    "details": [
        {
            "comment": "This code snippet defines an abstract base class, AbstractLanguageModel, for language models with config file path, model name, and caching options in the initializer. It also initializes a logger for logging purposes.",
            "location": "\"/media/root/Toshiba XG3/works/graph-of-thoughts/docs/src/graph_of_thoughts/language_models/abstract_language_model.py\":0-33",
            "content": "# Copyright (c) 2023 ETH Zurich.\n#                    All rights reserved.\n#\n# Use of this source code is governed by a BSD-style license that can be\n# found in the LICENSE file.\n#\n# main author: Nils Blach\nfrom abc import ABC, abstractmethod\nfrom typing import List, Dict, Union, Any\nimport json\nimport os\nimport logging\nclass AbstractLanguageModel(ABC):\n    \"\"\"\n    Abstract base class that defines the interface for all language models.\n    \"\"\"\n    def __init__(\n        self, config_path: str = \"\", model_name: str = \"\", cache: bool = False\n    ) -> None:\n        \"\"\"\n        Initialize the AbstractLanguageModel instance with configuration, model details, and caching options.\n        :param config_path: Path to the config file. Defaults to \"\".\n        :type config_path: str\n        :param model_name: Name of the language model. Defaults to \"\".\n        :type model_name: str\n        :param cache: Flag to determine whether to cache responses. Defaults to False.\n        :type cache: bool\n        \"\"\"\n        self.logger = logging.getLogger(self.__class__.__name__)"
        },
        {
            "comment": "This code initializes an abstract language model object with optional cache and loads its configuration from a specified file. It also provides methods to clear the response cache.",
            "location": "\"/media/root/Toshiba XG3/works/graph-of-thoughts/docs/src/graph_of_thoughts/language_models/abstract_language_model.py\":34-65",
            "content": "        self.config: Dict = None\n        self.model_name: str = model_name\n        self.cache = cache\n        if self.cache:\n            self.respone_cache: Dict[str, List[Any]] = {}\n        self.load_config(config_path)\n        self.prompt_tokens: int = 0\n        self.completion_tokens: int = 0\n        self.cost: float = 0.0\n    def load_config(self, path: str) -> None:\n        \"\"\"\n        Load configuration from a specified path.\n        :param path: Path to the config file. If an empty path provided,\n                     default is `config.json` in the current directory.\n        :type path: str\n        \"\"\"\n        if path == \"\":\n            current_dir = os.path.dirname(os.path.abspath(__file__))\n            path = os.path.join(current_dir, \"config.json\")\n        with open(path, \"r\") as f:\n            self.config = json.load(f)\n        self.logger.debug(f\"Loaded config from {path} for {self.model_name}\")\n    def clear_cache(self) -> None:\n        \"\"\"\n        Clear the response cache.\n        \"\"\"\n        self.respone_cache.clear()"
        },
        {
            "comment": "This code defines two abstract methods for a language model. The 'query' method takes a query and the desired number of responses, but doesn't specify what it should do with them. The 'get_response_texts' method expects response(s) from the language model, but doesn't clarify how to extract textual data. It serves as a placeholder for derived classes to implement their own functionality.",
            "location": "\"/media/root/Toshiba XG3/works/graph-of-thoughts/docs/src/graph_of_thoughts/language_models/abstract_language_model.py\":67-91",
            "content": "    @abstractmethod\n    def query(self, query: str, num_responses: int = 1) -> Any:\n        \"\"\"\n        Abstract method to query the language model.\n        :param query: The query to be posed to the language model.\n        :type query: str\n        :param num_responses: The number of desired responses.\n        :type num_responses: int\n        :return: The language model's response(s).\n        :rtype: Any\n        \"\"\"\n        pass\n    @abstractmethod\n    def get_response_texts(self, query_responses: Union[List[Any], Any]) -> List[str]:\n        \"\"\"\n        Abstract method to extract response texts from the language model's response(s).\n        :param query_responses: The responses returned from the language model.\n        :type query_responses: Union[List[Any], Any]\n        :return: List of textual responses.\n        :rtype: List[str]\n        \"\"\"\n        pass"
        }
    ]
}