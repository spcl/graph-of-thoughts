{
    "summary": "The code directory contains various sorting algorithm examples for numbers 0-9 with implementations for IO, CoT, ToT, and GoT. It includes data files, Python scripts to execute use cases, and organizes results by name, approaches, day, and time. The plot.py file visualizes the results after modification.",
    "details": [
        {
            "comment": "This code directory contains examples of sorting algorithms for lists of numbers from 0 to 9. Implementations are provided for IO, Chain-of-Thought (CoT), Tree of Thought (ToT) with two variations, and Graph of Thoughts (GoT). Data includes input files with precomputed samples, and Python scripts execute the use case with options to select samples and approaches.",
            "location": "\"/media/root/Toshiba XG3/works/graph-of-thoughts/docs/src/examples/sorting/README.md\":0-30",
            "content": "# Sorting\nThe use case in this directory sorts the provided list of \nnumbers containing numbers from 0 to 9 (duplicates allowed). \nWe provide implementations of five different approaches for \n32, 64 and 128 elements:\n- IO\n- Chain-of-Thought (CoT)\n- Tree of Thought (ToT):\n  - ToT: wider tree, meaning more branches per level\n  - ToT2: tree with more levels, but fewer branches per level\n- Graph of Thoughts (GoT):\n  - GoT: split into subarrays / sort / merge\n## Data\nWe provide input files with 100 precomputed samples for each list\nlength: `sorting_<number of elements>.csv`.\n## Execution\nThe files to execute the use case are called\n`sorting_<number of elements>.py`. In the main body, one can select the\nspecific samples to be run (variable sample) and the approaches\n(variable approaches). It is also possible to set a budget in dollars\n(variable budget).\nThe input filename for the samples is currently hardcoded to\n`sorting_<number of elements>.csv`, but can be updated in the function\n`run`.\nThe Python scripts will create the directory `result`, if it is not"
        },
        {
            "comment": "Code organizes results into separate directories for each run based on the name of LLM, list of approaches, day and start time. Inside these execution-specific directories, config.json contains the configuration, log.log has prompts & responses, and approach directories store GRS files for every sample. Plot data can be visualized by modifying the results directory in plot.py and running python3 plot.py.",
            "location": "\"/media/root/Toshiba XG3/works/graph-of-thoughts/docs/src/examples/sorting/README.md\":31-45",
            "content": "already present. In the 'result' directory, another directory is created\nfor each run: `{name of LLM}_{list of approaches}_{day}_{start time}`.\nInside each execution specific directory two files (`config.json`,\n`log.log`) and a separate directory for each selected approach are\ncreated. `config.json` contains the configuration of the run: input data,\nselected approaches, name of the LLM, and the budget. `log.log` contains\nthe prompts and responses of the LLM as well as additional debug data.\nThe approach directories contain a separate json file for every sample\nand the file contains the Graph Reasoning State (GRS) for that sample.\n## Plot Data\nChange the results directory in line 171 of `plot.py` and update the\nlength parameter in the subsequent line and run `python3 plot.py` to\nplot your data."
        }
    ]
}