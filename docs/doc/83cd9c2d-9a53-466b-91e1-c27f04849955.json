{
    "summary": "The code defines a function \"scramble\" that shuffles array elements and generates random sets, calculating their intersection for specified samples. It uses numpy's default random generator with seed 42 to generate sets of size 32, writing the input, generated, and intersection sets in CSV format.",
    "details": [
        {
            "comment": "The code snippet defines a function called \"scramble\" which shuffles the elements of an array randomly. It also contains main code block that specifies input parameters such as set size, range of integer numbers in sets, seed for random number generator, number of samples to be generated, and filename for output CSV file. The purpose is likely to generate a dataset by scrambling the order of elements within sets.",
            "location": "\"/media/root/Toshiba XG3/works/graph-of-thoughts/docs/src/examples/set_intersection/dataset_gen_intersection.py\":0-38",
            "content": "# Copyright (c) 2023 ETH Zurich.\n#                    All rights reserved.\n#\n# Use of this source code is governed by a BSD-style license that can be\n# found in the LICENSE file.\n#\n# main author: Robert Gerstenberger\nimport csv\nimport numpy as np\ndef scramble(array: np.ndarray, rng: np.random.Generator) -> None:\n    \"\"\"\n    Helper function to change the order of the elements in an array randomly.\n    :param array: Array to be scrambled.\n    :type: numpy.ndarray\n    :param rng: Random number generator.\n    :type rng: numpy.random.Generator\n    \"\"\"\n    size = array.shape[0]\n    index_array = rng.integers(0, size, size)\n    for i in range(size):\n        temp = array[i]\n        array[i] = array[index_array[i]]\n        array[index_array[i]] = temp\nif __name__ == \"__main__\":\n    \"\"\"\n    Input(u)  : Set size.\n    Input(v)  : Range of the integer numbers in the sets: 0..v (exclusive)\n    Input(w)  : Seed for the random number generator.\n    Input(x)  : Number of samples to be generated.\n    Input(y)  : Filename for the output CSV file."
        },
        {
            "comment": "Code generates random sets and calculates their intersection for a given number of samples. It uses numpy's default random generator, with seed 42, to generate sets of size 32. The intersected set sizes are also randomly determined (within certain bounds) for each sample. The code writes the input sets, generated sets, and intersection sets in CSV format.",
            "location": "\"/media/root/Toshiba XG3/works/graph-of-thoughts/docs/src/examples/set_intersection/dataset_gen_intersection.py\":39-66",
            "content": "    Output(z) : Input sets and intersected set written a file in the CSV format.\n                File contains the sample ID, input set 1, input set 2,\n                intersection set.\n    \"\"\"\n    set_size = 32  # size of the generated sets\n    int_value_ubound = 64  # (exclusive) upper limit of generated numbers\n    seed = 42  # seed of the random number generator\n    num_sample = 100  # number of samples\n    filename = \"set_intersection_032.csv\"  # output filename\n    assert 2 * set_size <= int_value_ubound\n    rng = np.random.default_rng(seed)\n    intersection_sizes = rng.integers(set_size // 4, 3 * set_size // 4, num_sample)\n    np.set_printoptions(\n        linewidth=np.inf\n    )  # no wrapping in the array fields in the output file\n    with open(filename, \"w\") as f:\n        fieldnames = [\"ID\", \"SET1\", \"SET2\", \"INTERSECTION\"]\n        writer = csv.DictWriter(f, delimiter=\",\", fieldnames=fieldnames)\n        writer.writeheader()\n        for i in range(num_sample):\n            intersection_size = intersection_sizes[i]"
        },
        {
            "comment": "Code generates a full set of integers, scrambles it, takes an intersection of the set with a specified size, splits the full set into two sets, scramble each set, and writes a row to a CSV file containing ID, SET1, SET2, and sorted INTERSECTION.",
            "location": "\"/media/root/Toshiba XG3/works/graph-of-thoughts/docs/src/examples/set_intersection/dataset_gen_intersection.py\":68-91",
            "content": "            full_set = np.arange(0, int_value_ubound, dtype=np.int16)\n            scramble(full_set, rng)\n            intersection = full_set[:intersection_size].copy()\n            sorted_intersection = np.sort(intersection)\n            set1 = full_set[:set_size].copy()\n            set2 = np.concatenate(\n                [intersection, full_set[set_size : 2 * set_size - intersection_size]]\n            )\n            scramble(set1, rng)\n            scramble(set2, rng)\n            writer.writerow(\n                {\n                    \"ID\": i,\n                    \"SET1\": set1.tolist(),\n                    \"SET2\": set2.tolist(),\n                    \"INTERSECTION\": sorted_intersection.tolist(),\n                }\n            )"
        }
    ]
}