{
    "summary": "The code generates a language model dataset by organizing country occurrences into popular and rest categories, cleaning paragraphs, checking for invalid elements, and storing the result in CSV format.",
    "details": [
        {
            "comment": "This function finds the indices of occurrences of a given country in an input text and returns them as a list of tuples containing index and country. The primary_countries variable is a list of countries used in the dataset.",
            "location": "\"/media/root/Toshiba XG3/works/graph-of-thoughts/docs/src/examples/keyword_counting/dataset_gen_countries.py\":0-42",
            "content": "# Copyright (c) 2023 ETH Zurich.\n#                    All rights reserved.\n#\n# Use of this source code is governed by a BSD-style license that can be\n# found in the LICENSE file.\n#\n# main author: Ales Kubicek\nimport csv\nfrom typing import List, Tuple\nfrom graph_of_thoughts import controller\ndef find_country_indices(text: str, country: str) -> List[Tuple[int, str]]:\n    \"\"\"\n    Finds the indices of the occurences of a given country in the input text.\n    :param text: Input text.\n    :type text: str\n    :param country: Country to search for.\n    :type country: str\n    :return: List of tuples, where each tuple consists of index and country.\n    :rtype: List[Tuple[int, str]]\n    \"\"\"\n    indices = []\n    index = text.find(country)\n    while index != -1:\n        indices.append(index)\n        index = text.find(country, index + 1)\n    return [(index, country) for index in indices]\nprimary_countries = [\n    \"Afghanistan\",\n    \"Argentina\",\n    \"Australia\",\n    \"Brazil\",\n    \"Canada\",\n    \"China\",\n    \"Colombia\",\n    \"Cuba\",\n    \"Egypt\","
        },
        {
            "comment": "This code contains lists of countries and their corresponding primary adjectives. The countries list includes 46 nations, while the adjectives list has 28 items. These data can be used for keyword counting or other text processing tasks related to country-specific information.",
            "location": "\"/media/root/Toshiba XG3/works/graph-of-thoughts/docs/src/examples/keyword_counting/dataset_gen_countries.py\":43-111",
            "content": "    \"France\",\n    \"Germany\",\n    \"Greece\",\n    \"India\",\n    \"Indonesia\",\n    \"Iran\",\n    \"Iraq\",\n    \"Ireland\",\n    \"Israel\",\n    \"Italy\",\n    \"Japan\",\n    \"Kenya\",\n    \"Mexico\",\n    \"Netherlands\",\n    \"New Zealand\",\n    \"Nigeria\",\n    \"North Korea\",\n    \"Pakistan\",\n    \"Peru\",\n    \"Philippines\",\n    \"Poland\",\n    \"Portugal\",\n    \"Russia\",\n    \"Saudi Arabia\",\n    \"South Africa\",\n    \"South Korea\",\n    \"Spain\",\n    \"Sweden\",\n    \"Switzerland\",\n    \"Thailand\",\n    \"Turkey\",\n    \"Ukraine\",\n    \"United Arab Emirates\",\n    \"United Kingdom\",\n    \"United States\",\n    \"Venezuela\",\n    \"Vietnam\",\n    \"Yemen\",\n    \"Zimbabwe\",\n    \"Belgium\",\n    \"Norway\",\n]\nprimary_adjectives = [\n    \"Afghan\",\n    \"Argentine \",\n    \"Argentinean\",\n    \"Australian\",\n    \"Brazilian\",\n    \"Canadian\",\n    \"Chinese\",\n    \"Colombian\",\n    \"Cuban\",\n    \"Egyptian\",\n    \"French\",\n    \"German\",\n    \"Greek\",\n    \"Indian\",\n    \"Indonesian\",\n    \"Iranian\",\n    \"Iraqi\",\n    \"Irish\",\n    \"Israeli\",\n    \"Italian\",\n    \"Japanese\",\n    \"Kenyan\",\n    \"Mexican\",\n    \"Dutch\",\n    \"New Zealander \",\n    \"Kiwi\","
        },
        {
            "comment": "The code provides a list of countries divided into two sections: \"popular_countries\" containing widely recognized nations, and \"rest_countries\" containing the remaining countries. It appears to be used for organizing or filtering country data in an application or dataset.",
            "location": "\"/media/root/Toshiba XG3/works/graph-of-thoughts/docs/src/examples/keyword_counting/dataset_gen_countries.py\":112-175",
            "content": "    \"Nigerian\",\n    \"North Korean\",\n    \"Pakistani\",\n    \"Peruvian\",\n    \"Filipino\",\n    \"Philippine\",\n    \"Polish\",\n    \"Portuguese\",\n    \"Russian\",\n    \"Saudi \",\n    \"Saudi Arabian\",\n    \"South African\",\n    \"South Korean\",\n    \"Spanish\",\n    \"Swedish\",\n    \"Swiss\",\n    \"Thai\",\n    \"Turkish\",\n    \"Ukrainian\",\n    \"United Arab Emirates\",\n    \"Emirati\",\n    \"British\",\n    \"American\",\n    \"Venezuelan\",\n    \"Vietnamese\",\n    \"Yemeni\",\n    \"Zimbabwean\",\n    \"Belgian\",\n    \"Norwegian\",\n]\nrest_countries = [\n    \"Albania\",\n    \"Algeria\",\n    \"Andorra\",\n    \"Angola\",\n    \"Antigua and Barbuda\",\n    \"Armenia\",\n    \"Austria\",\n    \"Azerbaijan\",\n    \"The Bahamas\",\n    \"Bahrain\",\n    \"Bangladesh\",\n    \"Barbados\",\n    \"Belarus\",\n    \"Belize\",\n    \"Benin\",\n    \"Bhutan\",\n    \"Bolivia\",\n    \"Bosnia and Herzegovina\",\n    \"Botswana\",\n    \"Brunei\",\n    \"Bulgaria\",\n    \"Burkina Faso\",\n    \"Burundi\",\n    \"Cabo Verde\",\n    \"Cambodia\",\n    \"Cameroon\",\n    \"Central African Republic\",\n    \"Chad\",\n    \"Chile\",\n    \"Comoros\",\n    \"Congo\",\n    \"Costa Rica\",\n    \"C\u00f4te d\u2019Ivoire\","
        },
        {
            "comment": "The code includes a list of country names in alphabetical order. Each country name is separated by a comma, and some countries have multiple names listed for different uses or recognition.",
            "location": "\"/media/root/Toshiba XG3/works/graph-of-thoughts/docs/src/examples/keyword_counting/dataset_gen_countries.py\":176-242",
            "content": "    \"Croatia\",\n    \"Cyprus\",\n    \"Czech Republic\",\n    \"Czechia\",\n    \"Denmark\",\n    \"Djibouti\",\n    \"Dominica\",\n    \"Dominican Republic\",\n    \"East Timor\",\n    \"Timor-Leste\",\n    \"Ecuador\",\n    \"El Salvador\",\n    \"Equatorial Guinea\",\n    \"Eritrea\",\n    \"Estonia\",\n    \"Eswatini\",\n    \"Ethiopia\",\n    \"Fiji\",\n    \"Finland\",\n    \"Gabon\",\n    \"The Gambia\",\n    \"Georgia\",\n    \"Ghana\",\n    \"Grenada\",\n    \"Guatemala\",\n    \"Guinea\",\n    \"Guinea-Bissau\",\n    \"Guyana\",\n    \"Haiti\",\n    \"Honduras\",\n    \"Hungary\",\n    \"Iceland\",\n    \"Jamaica\",\n    \"Jordan\",\n    \"Kazakhstan\",\n    \"Kiribati\",\n    \"Kosovo\",\n    \"Kuwait\",\n    \"Kyrgyzstan\",\n    \"Laos\",\n    \"Latvia\",\n    \"Lebanon\",\n    \"Lesotho\",\n    \"Liberia\",\n    \"Libya\",\n    \"Liechtenstein\",\n    \"Lithuania\",\n    \"Luxembourg\",\n    \"Madagascar\",\n    \"Malawi\",\n    \"Malaysia\",\n    \"Maldives\",\n    \"Mali\",\n    \"Malta\",\n    \"Marshall Islands\",\n    \"Mauritania\",\n    \"Mauritius\",\n    \"Micronesia\",\n    \"Moldova\",\n    \"Monaco\",\n    \"Mongolia\",\n    \"Montenegro\",\n    \"Morocco\",\n    \"Mozambique\",\n    \"Myanmar\",\n    \"Burma\",\n    \"Namibia\","
        },
        {
            "comment": "This code defines a list of countries and their corresponding adjectives, which can be used to generate diverse language datasets.",
            "location": "\"/media/root/Toshiba XG3/works/graph-of-thoughts/docs/src/examples/keyword_counting/dataset_gen_countries.py\":243-305",
            "content": "    \"Nauru\",\n    \"Nepal\",\n    \"Nicaragua\",\n    \"Niger\",\n    \"North Macedonia\",\n    \"Oman\",\n    \"Palau\",\n    \"Panama\",\n    \"Papua New Guinea\",\n    \"Paraguay\",\n    \"Qatar\",\n    \"Romania\",\n    \"Rwanda\",\n    \"Saint Kitts and Nevis\",\n    \"Saint Lucia\",\n    \"Saint Vincent and the Grenadines\",\n    \"Samoa\",\n    \"San Marino\",\n    \"Sao Tome and Principe\",\n    \"Senegal\",\n    \"Serbia\",\n    \"Seychelles\",\n    \"Sierra Leone\",\n    \"Singapore\",\n    \"Slovakia\",\n    \"Slovenia\",\n    \"Solomon Islands\",\n    \"Somalia\",\n    \"Sri Lanka\",\n    \"Sudan\",\n    \"Suriname\",\n    \"Syria\",\n    \"Taiwan\",\n    \"Tajikistan\",\n    \"Tanzania\",\n    \"Togo\",\n    \"Tonga\",\n    \"Trinidad and Tobago\",\n    \"Tunisia\",\n    \"Turkmenistan\",\n    \"Tuvalu\",\n    \"Uganda\",\n    \"Uruguay\",\n    \"Uzbekistan\",\n    \"Vanuatu\",\n    \"Vatican City\",\n    \"Zambia\",\n]\nrest_adjectives = [\n    \"Albanian\",\n    \"Algerian\",\n    \"Andorran\",\n    \"Angolan\",\n    \"Antiguan and Barbudan\",\n    \"Armenian\",\n    \"Austrian\",\n    \"Azerbaijani\",\n    \"Bahamian\",\n    \"Bahraini\",\n    \"Bangladeshi\",\n    \"Barbadian\",\n    \"Belarusian\",\n    \"Belizean\","
        },
        {
            "comment": "This code lists various country names and their corresponding adjective forms, used for identifying nationality or origin.",
            "location": "\"/media/root/Toshiba XG3/works/graph-of-thoughts/docs/src/examples/keyword_counting/dataset_gen_countries.py\":306-369",
            "content": "    \"Beninese\",\n    \"Bhutanese\",\n    \"Bolivian\",\n    \"Bosnian and Herzegovinian\",\n    \"Botswanan\",\n    \"Bruneian\",\n    \"Bulgarian\",\n    \"Burkinab\u00e8\",\n    \"Burundian\",\n    \"Cape Verdean\",\n    \"Cambodian\",\n    \"Cameroonian\",\n    \"Central African\",\n    \"Chadian\",\n    \"Chilean\",\n    \"Comorian\",\n    \"Congolese\",\n    \"Costa Rican\",\n    \"Ivorian\",\n    \"Croatian\",\n    \"Cypriot\",\n    \"Czech\",\n    \"Czech\",\n    \"Danish\",\n    \"Djiboutian\",\n    \"Dominican\",\n    \"Dominican\",\n    \"East Timorese\",\n    \"Timorese\",\n    \"Ecuadorian\",\n    \"Salvadoran\",\n    \"Equatorial Guinean\",\n    \"Eritrean\",\n    \"Estonian\",\n    \"Swazi\",\n    \"Ethiopian\",\n    \"Fijian\",\n    \"Finnish\",\n    \"Gabonese\",\n    \"Gambian\",\n    \"Georgian\",\n    \"Ghanaian\",\n    \"Grenadian\",\n    \"Guatemalan\",\n    \"Guinean\",\n    \"Bissau-Guinean\",\n    \"Guyanese\",\n    \"Haitian\",\n    \"Honduran\",\n    \"Hungarian\",\n    \"Icelandic\",\n    \"Jamaican\",\n    \"Jordanian\",\n    \"Kazakh\",\n    \"I-Kiribati\",\n    \"Kosovar\",\n    \"Kuwaiti\",\n    \"Kyrgyz\",\n    \"Laotian\",\n    \"Latvian\",\n    \"Lebanese\",\n    \"Basotho\",\n    \"Liberian\",\n    \"Libyan\","
        },
        {
            "comment": "This code defines a list of country names and their associated adjectival forms, used for keyword counting in a dataset.",
            "location": "\"/media/root/Toshiba XG3/works/graph-of-thoughts/docs/src/examples/keyword_counting/dataset_gen_countries.py\":370-432",
            "content": "    \"Liechtensteiner\",\n    \"Lithuanian\",\n    \"Luxembourger\",\n    \"Malagasy\",\n    \"Malawian\",\n    \"Malaysian\",\n    \"Maldivian\",\n    \"Malian\",\n    \"Maltese\",\n    \"Marshallese\",\n    \"Mauritanian\",\n    \"Mauritian\",\n    \"Micronesian\",\n    \"Moldovan\",\n    \"Mon\u00e9gasque\",\n    \"Mongolian\",\n    \"Montenegrin\",\n    \"Moroccan\",\n    \"Mozambican\",\n    \"Myanmarese\",\n    \"Burmese\",\n    \"Namibian\",\n    \"Nauruan\",\n    \"Nepali\",\n    \"Nicaraguan\",\n    \"Nigerien\",\n    \"Macedonian\",\n    \"Omani\",\n    \"Palauan\",\n    \"Panamanian\",\n    \"Papua New Guinean\",\n    \"Paraguayan\",\n    \"Qatari\",\n    \"Romanian\",\n    \"Rwandan\",\n    \"Kittitian\",\n    \"Nevisian\",\n    \"Saint Lucian\",\n    \"Vincentian\",\n    \"Samoan\",\n    \"Sammarinese\",\n    \"Santomean\",\n    \"Senegalese\",\n    \"Serbian\",\n    \"Seychellois\",\n    \"Sierra Leonean\",\n    \"Singaporean\",\n    \"Slovak\",\n    \"Slovenian\",\n    \"Solomon Islander\",\n    \"Somali\",\n    \"Sri Lankan\",\n    \"Sudanese\",\n    \"Surinamese\",\n    \"Syrian\",\n    \"Taiwanese\",\n    \"Tajik\",\n    \"Tanzanian\",\n    \"Togolese\",\n    \"Tongan\",\n    \"Trinidadian \",\n    \"Tobagonian\",\n    \"Tunisian\","
        },
        {
            "comment": "This code generates a prompt for an AI language model to create a continuous passage with 16 sentences using a provided list of countries and specific restrictions. The generated text should mention the countries multiple times consecutively, be creative and coherent, and avoid using adjectives for the countries.",
            "location": "\"/media/root/Toshiba XG3/works/graph-of-thoughts/docs/src/examples/keyword_counting/dataset_gen_countries.py\":433-459",
            "content": "    \"Turkmen\",\n    \"Tuvaluan\",\n    \"Ugandan\",\n    \"Uruguayan\",\n    \"Uzbek\",\n    \"Ni-Vanuatu\",\n    \"Vatican\",\n    \"Zambian\",\n]\nlm = controller.ChatGPT(\n    \"../../graph_of_thoughts/controller/config.json\", model_name=\"chatgpt4\"\n)\nprompt = \"\"\"<Instruction> Generate a continuous passage (single paragraph) of 16 sentences following the provided restrictions precisely. </Instruction>\n<Restrictions>\nThe following restrictions must apply to the generated text:\n1. Single continuous passage of exactly 16 sentences without any paragraphs (line breaks).\n2. Countries appearing in the passage must be only from the provided list. No other countries can be mentioned.\n3. When a country is mentioned in the passage, it must be mentioned multiple times consecutively in the same or following sentences.\n4. Passage should be creative and coherent.\n5. Using adjectives of a country is NOT allowed (e.g., \"Colombian coffee\" should be \"coffee from Colombia\" instead)\n</Restrictions>\n<Example>\nList of countries: [Afghanistan, Argentina"
        },
        {
            "comment": "The code defines a list containing the names of countries. These country names are used in various parts of the program to handle data related to specific countries.",
            "location": "\"/media/root/Toshiba XG3/works/graph-of-thoughts/docs/src/examples/keyword_counting/dataset_gen_countries.py\":459-461",
            "content": ", Australia, Brazil, Canada, China, Colombia, Cuba, Egypt, France, Germany, Greece, India, Indonesia, Iran, Iraq, Ireland, Israel, Italy, Japan, Kenya, Mexico, Netherlands, New Zealand, Nigeria, North Korea, Pakistan, Peru, Philippines, Poland, Portugal, Russia, Saudi Arabia, South Africa, South Korea, Spain, Sweden, Switzerland, Thailand, Turkey, Ukraine, United Arab Emirates, United Kingdom, United States, Venezuela, Vietnam, Yemen, Zimbabwe, Belgium, Norway]\nPassage:\nWhile exploring the ancient ruins in Greece, Sam discovered manuscripts that hinted at the hidden treasures of Egypt. It seemed these treasures were once stolen from Egypt by rogue merchants and secretly moved to Greece, only to be buried under layers of time. Intrigued, he shared the findings with his friend Maya from India, who was an expert in decoding ancient languages. She pointed out that there was a similar legend in India about treasures from China that had somehow ended up in the southern parts of India, possibly"
        },
        {
            "comment": "Code snippet describes a conversation between Sam and Maya discussing historical connections between different countries through trade and cultural exchanges.",
            "location": "\"/media/root/Toshiba XG3/works/graph-of-thoughts/docs/src/examples/keyword_counting/dataset_gen_countries.py\":461-461",
            "content": " through trade or conquest. She also recounted tales from China that spoke of incredible artifacts from Indonesia, suggesting a rich tapestry of cultural exchanges throughout history. Their conversation took an interesting turn when Sam mentioned a book he'd read about the mysterious connections between Argentina and Brazil. The book detailed how both Argentina and Brazil, despite their differences, shared tales of lost civilizations and forgotten cities deep within their jungles. Maya excitedly mentioned that she'd been to the Philippines and had heard local legends about ancient ties with Indonesia and how traders from the Philippines would journey to Indonesia in search of spices and other goods. Thinking of spices, Sam fondly recalled his trip to Spain, where he had learned about the country's historical links with Portugal. Spain and Portugal, both maritime giants of their time, had extensively explored unknown lands and established trade routes. Maya, remembering her travels, sai"
        },
        {
            "comment": "This code generates a dataset of samples, where each sample contains an ID, text, list of countries mentioned, number of sentences, and number of characters. It will generate 100 samples with incrementing IDs. The provided list of countries serves as the pool from which countries will be randomly selected for each sample's text.",
            "location": "\"/media/root/Toshiba XG3/works/graph-of-thoughts/docs/src/examples/keyword_counting/dataset_gen_countries.py\":461-470",
            "content": "d that she had been to Belgium once and was fascinated by its connections with the Netherlands. Both Belgium and the Netherlands, she explained, had rich histories of art, trade, and diplomacy that intertwined them for centuries. They both sat back, marveling at the interconnectedness of the world and how countries from Greece to the Netherlands shared tales of adventure, discovery, and mystery.\n</Example>\nList of countries: [Afghanistan, Argentina, Australia, Brazil, Canada, China, Colombia, Cuba, Egypt, France, Germany, Greece, India, Indonesia, Iran, Iraq, Ireland, Israel, Italy, Japan, Kenya, Mexico, Netherlands, New Zealand, Nigeria, North Korea, Pakistan, Peru, Philippines, Poland, Portugal, Russia, Saudi Arabia, South Africa, South Korea, Spain, Sweden, Switzerland, Thailand, Turkey, Ukraine, United Arab Emirates, United Kingdom, United States, Venezuela, Vietnam, Yemen, Zimbabwe, Belgium, Norway]\nPassage:\n\"\"\"\nnum_samples = 100\nsample_id = 0\nresult = [[\"ID\", \"Text\", \"Countries\", \"Sentences\", \"Characters\"]]"
        },
        {
            "comment": "This code generates passages containing country names for keyword counting. It iterates through a given number of samples, queries the language model (lm) for responses, cleans paragraphs by removing newlines and extra spaces, finds all occurrences of primary countries in each text, orders them based on their appearance in the text, and checks for invalid countries or adjectives.",
            "location": "\"/media/root/Toshiba XG3/works/graph-of-thoughts/docs/src/examples/keyword_counting/dataset_gen_countries.py\":472-498",
            "content": "\"\"\"\nGenerate passages of text that contain country names to be used as input for the\nkeyword counting.\nInput(x)  : Number of samples\nOutput(y) : Passages written to a file in the CSV format.\n            File contains the sample ID, the passage, the countries the passage\n            contains, the sentences of the passages, number of characters of the\n            passage.\n\"\"\"\n# For x batches of y responses\nfor _ in range(num_samples):\n    response = lm.query(prompt, 1)\n    texts = lm.get_response_texts(response)\n    for text in texts:\n        # Clean paragraphs - single long passage\n        text = text.strip().replace(\"\\n\", \"\")\n        # Get all occurrences of all primary permissible countries\n        occurrences = []\n        for country in [country for country in primary_countries if country in text]:\n            occurrences.extend(find_country_indices(text, country))\n        # Order exactly how they appear in the text\n        ordered_occurrences = [country[1] for country in sorted(occurrences)]\n        # Check invalid countries and adjectives"
        },
        {
            "comment": "This code segment checks for invalid primary adjectives, rest countries, and rest adjectives in the text. It counts their occurrences, and if any of them are present, it prints a message with details about the invalid elements found. If there are no invalid elements, it adds the sample (with its ID, text, ordered occurrences, number of sentences, and total length) to the result list. The code continues to the next iteration, and after processing all samples, it will write the final result to a CSV file.",
            "location": "\"/media/root/Toshiba XG3/works/graph-of-thoughts/docs/src/examples/keyword_counting/dataset_gen_countries.py\":499-531",
            "content": "        invalid_primary_adjective = [\n            adjective for adjective in primary_adjectives if adjective in text\n        ]\n        invalid_rest_country = [\n            country for country in rest_countries if country in text\n        ]\n        invalid_rest_adjective = [\n            adjective for adjective in rest_adjectives if adjective in text\n        ]\n        invalid_count = (\n            len(invalid_primary_adjective)\n            + len(invalid_rest_country)\n            + len(invalid_rest_adjective)\n        )\n        if invalid_count > 0:\n            print(\n                f\"Invalid countries or adjectives present: {invalid_primary_adjective}, {invalid_rest_country}, {invalid_rest_adjective}\"\n            )\n            continue\n        result.append(\n            [\n                sample_id,\n                text,\n                \"[{0}]\".format(\", \".join(map(str, ordered_occurrences))),\n                len(text.split(\".\")) - 1,\n                len(text),\n            ]\n        )\n        sample_id += 1\n# Writing to csv file"
        },
        {
            "comment": "This code writes the result to a CSV file named \"countries_script.csv\". It opens the file in write mode (\"w\"), creates a CSV writer object, and uses the writerows() method to write each row of the result variable to the CSV file.",
            "location": "\"/media/root/Toshiba XG3/works/graph-of-thoughts/docs/src/examples/keyword_counting/dataset_gen_countries.py\":532-534",
            "content": "with open(\"countries_script.csv\", \"w\") as csvfile:\n    csvwriter = csv.writer(csvfile)\n    csvwriter.writerows(result)"
        }
    ]
}