{
    "summary": "The code provides a data generator for set intersections and allows users to customize parameters, storing results in JSON files. To visualize the data, modify the results directory and length parameter in `plot.py` before executing the script.",
    "details": [
        {
            "comment": "This code provides different approaches for computing set intersection and offers a data generator to create samples. It includes IO, Chain-of-Thought (CoT), Tree of Thought (ToT) with two variations, and Graph of Thoughts (GoT). The user can specify the number of elements, upper bound, seed, number of samples, and output filename. The code is structured into separate files for each set length.",
            "location": "\"/media/root/Toshiba XG3/works/graph-of-thoughts/docs/src/examples/set_intersection/README.md\":0-28",
            "content": "# Set Intersection\nThe use case in this directory computes the intersection of two input\nsets. We provide implementations of five different approaches for 32, 64\nand 128 elements:\n- IO\n- Chain-of-Thought (CoT)\n- Tree of Thought (ToT):\n  - ToT: wider tree, meaning more branches per level\n  - ToT2: tree with more levels, but fewer branches per level\n- Graph of Thoughts (GoT)\n## Data\nWe provide input files with 100 precomputed samples for each set length:\n`set_intersection_<number of elements>.csv`. It is also possible to use\nthe data generator `dataset_gen_intersection.py` to generate additional or\ndifferent samples. The parameters can be updated in lines 24 to 28 of\nthe main body:\n- set_size = 32 # size of the generated sets\n- int_value_ubound = 64 # (exclusive) upper limit of generated numbers\n- seed = 42 # seed of the random number generator\n- num_sample = 100 # number of samples\n- filename = 'set_intersection_032.csv' # output filename\n## Execution\nThe files to execute the use case are called\n`set_intersection_<number of elements>.py`. In the main body, one can"
        },
        {
            "comment": "This code selects samples and approaches, allows budget setting, hardcodes input filename, creates directories for execution-specific files, and stores the Graph Reasoning State (GRS) for each sample in separate JSON files.",
            "location": "\"/media/root/Toshiba XG3/works/graph-of-thoughts/docs/src/examples/set_intersection/README.md\":29-45",
            "content": "select the specific samples to be run (variable sample) and the\napproaches (variable approaches). It is also possible to set a budget in\ndollars (variable budget).\nThe input filename for the samples is currently hardcoded to\n`set_intersection_<number of elements>.csv`, but can be updated in the\nfunction `run`.\nThe Python scripts will create the directory `result`, if it is not\nalready present. In the `result` directory, another directory is created\nfor each run: `{name of LLM}_{list of approaches}_{day}_{start time}`.\nInside each execution specific directory two files (`config.json`,\n`log.log`) and a separate directory for each selected approach are\ncreated. `config.json` contains the configuration of the run: input data,\nselected approaches, name of the LLM, and the budget. `log.log` contains\nthe prompts and responses of the LLM as well as additional debug data.\nThe approach directories contain a separate json file for every sample\nand the file contains the Graph Reasoning State (GRS) for that sample."
        },
        {
            "comment": "This code snippet instructs the user to modify the results directory in line 170 of `plot.py` and adjust the length parameter accordingly before executing `python3 plot.py` to visualize their data.",
            "location": "\"/media/root/Toshiba XG3/works/graph-of-thoughts/docs/src/examples/set_intersection/README.md\":47-51",
            "content": "## Plot Data\nChange the results directory in line 170 of `plot.py` and update the\nlength parameter in the subsequent line and run `python3 plot.py` to\nplot your data."
        }
    ]
}